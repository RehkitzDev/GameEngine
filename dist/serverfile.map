{"version":3,"sources":["core\\AssetFactory.ts","core\\GameObjectManager.ts","core\\REngine.ts","core\\networking\\RWebSocket.ts","server\\networking\\WebSocketServer.ts","server\\RServer.ts","serverfile.ts"],"names":[],"mappings":"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","file":"serverfile.map","sourceRoot":"..\\src","sourcesContent":["import { AssetsManager, Scene, AbstractMesh, Mesh, InstancedMesh } from \"babylonjs\";\r\n\r\nexport class AssetFactory{\r\n\r\n\r\n    private meshAssets: Map<string,AbstractMesh>;\r\n\r\n    public constructor(scene: Scene){\r\n        \r\n        this.meshAssets = new Map<string,AbstractMesh>();\r\n        this.init(scene);\r\n    }\r\n\r\n    private init(scene: Scene){\r\n        scene.meshes.forEach((mesh: AbstractMesh) => {\r\n            if(!this.meshAssets.has(mesh.name))\r\n                this.meshAssets.set(mesh.name,mesh);\r\n        });\r\n    }\r\n\r\n    public CreateMeshInstance(objectName: string,meshAssetName: string): InstancedMesh | null{\r\n        if(this.meshAssets.has(meshAssetName)){\r\n            let mesh = (this.meshAssets.get(meshAssetName) as Mesh).createInstance(objectName);\r\n            mesh.setEnabled(true);\r\n            return mesh;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}","import { NetGameObject } from \"./gameobject/NetGameObject\";\r\nimport { LinesMesh } from \"babylonjs\";\r\nimport { AssetFactory } from \"./AssetFactory\";\r\nimport { GameObject } from \"./gameobject/GameObject\";\r\nimport { ConnectedPlayer } from \"./networking/ConnectedPlayer\";\r\n\r\nexport class GameObjectManager{\r\n\r\n    protected assetFactory: AssetFactory;\r\n    protected gameObjects: Array<GameObject>;\r\n    protected networkedGameObjects: Map<number,NetGameObject>;\r\n    protected connectedPlayers: Map<number, ConnectedPlayer>;\r\n\r\n    constructor(assetFactory: AssetFactory){\r\n        this.assetFactory = assetFactory;\r\n        this.gameObjects = new Array<GameObject>();\r\n        this.networkedGameObjects = new Map<number,NetGameObject>();\r\n        this.connectedPlayers = new Map<number, ConnectedPlayer>();\r\n    }\r\n\r\n    public getFreePlayerId(): number{\r\n        for(let i=0; i < 65535; i++)\r\n            if(!this.connectedPlayers.has(i))\r\n                return i;\r\n        return -1;\r\n    }\r\n\r\n    public getFreeGameObjectId(): number{\r\n        for(let i=0; i < 65535; i++)\r\n            if(!this.networkedGameObjects.has(i))\r\n                return i;\r\n        return -1;\r\n    }\r\n\r\n    public addNetworkedGameObject(gameObject: NetGameObject){\r\n        if(!this.networkedGameObjects.has(gameObject.getId()))\r\n            this.networkedGameObjects.set(gameObject.getId(),gameObject);\r\n    }\r\n\r\n\r\n    public addOfflineGameObject(gameObject: GameObject){\r\n        this.gameObjects.push(gameObject);\r\n    }\r\n\r\n    public removeNetworkedGameObject(gameObject: NetGameObject){\r\n        if(this.networkedGameObjects.has(gameObject.getId())){\r\n            gameObject.getMesh().dispose();\r\n            this.networkedGameObjects.delete(gameObject.getId())\r\n        }\r\n    }\r\n\r\n    public removeGameObject(gameObject: GameObject){\r\n        gameObject.getMesh().dispose();\r\n        this.gameObjects = this.gameObjects.filter(g => g != gameObject);    \r\n    }\r\n\r\n    public update(deletaTime: number){\r\n        this.gameObjects.forEach((gameObject: GameObject) => {\r\n            gameObject.Update(deletaTime);\r\n        });\r\n\r\n        this.networkedGameObjects.forEach((gameObject: GameObject, id: number) => {\r\n            gameObject.Update(deletaTime);\r\n        });\r\n    }\r\n}","import { Engine, Scene,AssetsManager, NullEngine, AbstractAssetTask } from \"babylonjs\";\r\nimport { AssetFactory } from \"./AssetFactory\";\r\nimport { GameObjectManager } from \"./GameObjectManager\";\r\nimport { RWebSocket } from \"./networking/RWebSocket\";\r\n\r\nexport class REngine{\r\n    \r\n    private babylonEngine: Engine;\r\n    private scene: Scene;\r\n\r\n    private assetManager: AssetsManager;\r\n    private gameObjectManager: GameObjectManager | null;\r\n    private assetFactory: AssetFactory | null;\r\n    private webSocket: RWebSocket;\r\n\r\n    constructor(babylonEngine: Engine, ws: RWebSocket){\r\n        this.babylonEngine = babylonEngine;\r\n        this.webSocket = ws;\r\n\r\n        this.scene = new Scene(this.babylonEngine);\r\n        this.assetManager = new AssetsManager(this.scene);\r\n        this.assetFactory = null;\r\n        this.gameObjectManager = null;\r\n        this.assetManager.onFinish = (tasks: AbstractAssetTask[]) => {  this.init(); };\r\n    }\r\n\r\n    public getDeltaTime(): number{\r\n        return this.babylonEngine.getDeltaTime() / 1000;\r\n    }\r\n\r\n    public getAssetManager(): AssetsManager{\r\n        return this.assetManager;\r\n    }\r\n\r\n    public getAssetFactory(): AssetFactory{\r\n        return this.assetFactory!;\r\n    }\r\n\r\n    public getGameObjectManager(): GameObjectManager{\r\n        return this.gameObjectManager!;\r\n    }\r\n\r\n    public Update(deltaTime: number){\r\n        this.gameObjectManager!.update(deltaTime);\r\n    }\r\n\r\n    private init(){\r\n        this.assetFactory = new AssetFactory(this.scene);\r\n        this.gameObjectManager = new GameObjectManager(this.assetFactory);\r\n        this.webSocket.connect();\r\n\r\n        this.scene.onBeforeRenderObservable.add(() => {\r\n            this.Update(this.getDeltaTime());\r\n        });\r\n\r\n        if(!(this.babylonEngine instanceof NullEngine))\r\n            this.babylonEngine.runRenderLoop(() => { this.scene.render(); });\r\n    }\r\n\r\n    \r\n\r\n}","import { ConnectedPlayer } from \"./ConnectedPlayer\";\r\n\r\nexport abstract class RWebSocket{\r\n    \r\n    abstract connect(): void;\r\n}","import * as http from \"http\";\r\nimport * as ws from \"ws\";\r\nimport{ Packet, NetHandler, DataTypes } from \"nethandler\";\r\nimport { Server } from \"http\";\r\nimport { RWebSocket } from \"../../core/networking/RWebSocket\";\r\nimport { GameObjectManager } from \"../../core/GameObjectManager\";\r\n\r\n\r\n\r\nexport class WebSocketServer extends RWebSocket{\r\n\r\n    private gameObjectManager: GameObjectManager;\r\n    private wsServer: ws.Server | null;\r\n    private port: number;\r\n\r\n    constructor(port: number, gameObjectManager: GameObjectManager){\r\n        super();\r\n        this.wsServer = null;\r\n        this.port = port;\r\n        this.gameObjectManager = gameObjectManager;\r\n    }\r\n\r\n    public connect(): void {\r\n        this.wsServer = new ws.Server({port: this.port});\r\n        this.wsServer.on(\"listening\", () => { console.log(\"websocket listening on port \"+ this.port); });\r\n        this.wsServer.addListener(\"connection\", this.onPlayerConnection); \r\n    }\r\n\r\n    private onPlayerConnection(ws: WebSocket){\r\n        console.log(\"websocket connection\");\r\n        console.log(ws);\r\n        //ws.addEventListener(\"message\")\r\n    }\r\n\r\n    private onPlayerMessage(){\r\n\r\n    }\r\n\r\n\r\n}","import { REngine } from \"../core/REngine\";\r\nimport { NullEngine } from \"babylonjs\";\r\nimport { WebSocketServer } from \"./networking/WebSocketServer\";\r\n\r\nexport class RServer extends REngine{\r\n\r\n    constructor(port: number){\r\n        super(new NullEngine(),new WebSocketServer(port));\r\n        console.log(\"success\");\r\n    }\r\n\r\n}","import { RServer } from \"./server/RServer\";\r\n\r\n\r\n\r\n\r\nlet rserver = new RServer(1337);\r\nrserver.getAssetManager().load();\r\n\r\n\r\n\r\n\r\n//README: \"parcel --target=node dist/serverfile.js\" BEI NODE ENV"]}